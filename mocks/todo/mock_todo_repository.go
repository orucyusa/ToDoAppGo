// Code generated by MockGen. DO NOT EDIT.
// Source: yusa/todo (interfaces: TodoRepository)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"
	todo "yusa/todo"

	gomock "github.com/golang/mock/gomock"
)

// MockTodoRepository is a mock of TodoRepository interface.
type MockTodoRepository struct {
	ctrl     *gomock.Controller
	recorder *MockTodoRepositoryMockRecorder
}

// MockTodoRepositoryMockRecorder is the mock recorder for MockTodoRepository.
type MockTodoRepositoryMockRecorder struct {
	mock *MockTodoRepository
}

// NewMockTodoRepository creates a new mock instance.
func NewMockTodoRepository(ctrl *gomock.Controller) *MockTodoRepository {
	mock := &MockTodoRepository{ctrl: ctrl}
	mock.recorder = &MockTodoRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTodoRepository) EXPECT() *MockTodoRepositoryMockRecorder {
	return m.recorder
}

// AddTodo mocks base method.
func (m *MockTodoRepository) AddTodo(arg0 todo.Todo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddTodo", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddTodo indicates an expected call of AddTodo.
func (mr *MockTodoRepositoryMockRecorder) AddTodo(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTodo", reflect.TypeOf((*MockTodoRepository)(nil).AddTodo), arg0)
}

// GetTodos mocks base method.
func (m *MockTodoRepository) GetTodos() ([]todo.Todo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTodos")
	ret0, _ := ret[0].([]todo.Todo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTodos indicates an expected call of GetTodos.
func (mr *MockTodoRepositoryMockRecorder) GetTodos() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTodos", reflect.TypeOf((*MockTodoRepository)(nil).GetTodos))
}

// HasTodo mocks base method.
func (m *MockTodoRepository) HasTodo(arg0 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasTodo", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HasTodo indicates an expected call of HasTodo.
func (mr *MockTodoRepositoryMockRecorder) HasTodo(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasTodo", reflect.TypeOf((*MockTodoRepository)(nil).HasTodo), arg0)
}
